Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система управління орендою автомобілів

	Студент гр. ПЗПІ-21-5                                    Шапошніков Л.І.
                                                                           (підпис)
	Керівник роботи                          _______________  ст.викл Сокорчук І.П.
                                                                            (підпис)
						      Роботу захищено «__»________ 2024р. 
						        з оцінкою     __________________

	Комісія:
 ______________  доц. Лещинський В.О.
         (підпис)
_______________  доц. Лещинська І.О.
         (підпис)
_______________  ст.викл Сокорчук І.П.
         (підпис)


Харків 2024 р. 
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук Кафедра програмної інженерії
 Спеціальність 121 – Інженерія програмного забезпечення
Курс	3	Семестр	6	.
Навчальна дисципліна Архітектура програмного забезпечення


ЗАВДАННЯ
НА ЛАБОРАТОРНІ РОБОТИ СТУДЕНТОВІ


1.	Тема проекту: Система управління орендою автомобілів
2.	Термін узгодження завдання з лабораторних робіт «_10_»_квітня 2024р.
3.	Термін здачі завдання з лабораторних робіт «29» червня 2024р..
4.	Вихідні дані до проекту: методичні вказівки до виконання лабораторних робіт, вимоги до системи, аркуш завдання до лабораторних робіт, рекомендації що до розробки.
5.	Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): Vision and Scope document, опис візуальної frontend частини, мобільна версія, опис частини кодування (backend) яка буде реалізовувати основну логіку програми та взаємодію з базою даних, модульні частини IoT.
 
КАЛЕНДАРНИЙ ПЛАН





№	Основні етапи виконання
проекту в рамках лабораторних робіт	Термін виконання етапів	Примітка
1	Видача	теми,	узгодження	і
затвердження теми	10.04.2024	
2	Виконання	1	лабораторної
роботи	10.04.2024 – 21.04.2024	
3	Захист 1 лабораторної роботи	21.04.2024 – 07.05.2024	
4	Виконання	2	лабораторної
роботи	21.04.2024 – 07.05.2024	
5	Захист 2 лабораторної роботи	07.05.2024 – 21.05.2024	
6	Виконання	3	лабораторної
роботи	07.05.2024 – 21.05.2024	
7	Захист 3 лабораторної роботи	21.05.2024 – 09.06.2024	
8	Виконання	4	лабораторної
роботи	21.05.2024 – 09.06.2024	
9	Захист 4 лабораторної роботи	09.06.2024 – 24.06.2024	
10	Виконання	5	лабораторної
роботи	09.06.2024 – 24.06.2024	
11	Захист 5 лабораторної роботи	24.06.2024 – 29.06.2024	
12	Захист проекту	30.06.2024	


Дата видачі теми проекту у «10» квітня 2024 р


Викладач лабораторних робіт ______________ ст. викл. Сокорчук І.П. (                                                                						(підпис)    

Завдання прийняв до виконання .                  .  Шапошніков Л.І.
ст.гр. ПЗПІ-21-5                                          (підпис)

РЕФЕРАТ


Пояснювальна записка з курсової роботи: 29 сторінок, 4 рисунки, 14 джерел.
АВТОМАТИЗАЦІЯ, АНАЛІТИКА, БЕЗПЕКА, БРОНЮВАННЯ, ВЕБ-ІНТЕРФЕЙС, ДАНІ, ІНТЕРНЕТ РЕЧЕЙ (IOT), КЛІЄНТИ, МАСШТАБОВАНІСТЬ, ОРЕНДА, ПРОДУКТИВНІСТЬ, РЕАЛЬНЕ ВІДСТЕЖЕННЯ, СЕРВЕРНА ЧАСТИНА, СИСТЕМА УПРАВЛІННЯ, ТЕХНІЧНЕ ОБСЛУГОВУВАННЯ.
Метою даної курсової роботи є розробка комплексної системи управління орендою автомобілів, яка забезпечить ефективне управління процесами бронювання, обліку, аналізу даних про автомобілі та клієнтів, використовуючи сучасні технології для підвищення безпеки та якості обслуговування. Система повинна включати як серверну, так і клієнтську частини, підтримувати відстеження місцезнаходження автомобілів у режимі реального часу та забезпечувати зручний і інтуїтивно зрозумілий інтерфейс для користувачів.
Для досягнення поставленої мети необхідно виконати наступні завдання: провести детальний аналіз вимог до серверної та клієнтської частин системи, визначити функціональні та нефункціональні вимоги, включаючи вимоги щодо безпеки та продуктивності. Потрібно розробити структуру бази даних для зберігання інформації про автомобілі, клієнтів, бронювання, технічне обслуговування та відгуки, забезпечивши її оптимальність та масштабованість. Необхідно написати програмний код серверної частини системи, яка буде відповідати за обробку запитів клієнтів, виконання бізнес-логіки та взаємодію з базою даних, а також реалізувати модулі для обробки даних з датчиків IoT для відстеження координат автомобілів у режимі реального часу.
Також важливо створити інтерфейс користувача для взаємодії з системою, включаючи функціональність для створення, редагування та видалення записів про автомобілі, клієнтів, оренди, технічне обслуговування та відгуки, забезпечивши зручний та інтуїтивно зрозумілий інтерфейс для кінцевих користувачів. Вивчення принципів роботи IoT та їх застосування в системах управління також є важливою частиною роботи. Необхідно реалізувати програмну частину для отримання та обробки даних з датчиків, що відстежують координати автомобілів.
Для перевірки коректності, надійності та швидкодії системи слід провести тестування серверної та клієнтської частин, виявити та виправити можливі помилки, а також провести тестування точності відстеження координат автомобілів. Важливим етапом є оцінка ефективності розробленої системи, її продуктивності та зручності використання, а також розгляд можливостей для подальшого розвитку та впровадження системи в реальних умовах.

 
ЗМІСТ


ВСТУП	7
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ	8
2 ПОСТАНОВКА ЗАДАЧІ	11
2.1 Основний функціонал системи	11
2.2 Допущення та залежності	12
2.3 Релізи	12
2.4 Користувацькі обмеження	14
3.1 Back-end частина системи	15
3.2 Frontend-частина системи	17
3.3 IoT частина системи	18
4 СТРУКТУРА БАЗИ ДАНИХ	20
4.1 ER-моделювання	20
4.2 Реалізація БД	21
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ	25
5.1 Серверна частина	25
5.2 Frontend	26
5.3 IoT	27
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ	29
ВИСНОВКИ	31
ПЕРЕЛІК ДЖЕРЕЛ	32

 
ВСТУП


У сучасному світі ринок оренди автомобілів швидко розвивається, що обумовлено зростанням попиту на мобільність та гнучкість у використанні транспортних засобів. Системи управління орендою автомобілів відіграють ключову роль у забезпеченні ефективного та надійного обслуговування клієнтів, оптимізації процесів управління автопарком та підвищенні безпеки транспортних засобів. Розробка такої системи є важливою для забезпечення конкурентоспроможності компаній, що надають послуги з оренди автомобілів, а також для покращення якості та швидкості обслуговування клієнтів.
Основною метою цієї системи є автоматизація та спрощення процесів бронювання, обліку та аналізу даних про автомобілі та клієнтів. Завдяки використанню сучасних технологій система дозволяє підвищити ефективність управління автопарком, забезпечити надійне зберігання та швидкий доступ до даних, а також покращити безпеку орендованих автомобілів. Інтеграція таких функцій забезпечує зручність як для операторів системи, так і для кінцевих користувачів, надаючи їм можливість швидко і легко виконувати необхідні операції з управління орендою.
Таким чином, розробка системи управління орендою автомобілів є необхідною для задоволення сучасних вимог ринку, забезпечення високої якості обслуговування клієнтів та оптимізації внутрішніх бізнес-процесів компаній, що займаються орендою автомобілів.
 
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ


Концептуальне моделювання предметної області – це процес створення абстрактної моделі інформації, що відображає ключові об'єкти, властивості і взаємозв'язки в предметній області системи управління орендою автомобілів. Ця модель служить для розуміння структури даних і основних бізнес-процесів, що відбуваються в системі.
Діаграма Use Case відображає взаємодії між користувачами системи (акторами) та функціональними можливостями системи (сценаріями використання). У даній діаграмі (див. рис. 1.1) зображені два типи користувачів: Адміністратор та Клієнт, а також системні функції, що вони можуть виконувати.

 
Рисунок 1.1 – Use case діаграма
Актори:
–	адміністратор: має доступ до всіх основних функцій управління системою;
–	клієнт: має доступ до функцій, пов'язаних із власним обліковим записом та відгуками;
–	система: представлена як окремий актор для відображення автоматизованих функцій.
Сценарії використання для адміністратора:
–	управління автомобілями - створення авто, редагування авто, видалення авто;
–	управління страхуванням - дозволяє адміністратору керувати інформацією про страхування автомобілів;
–	управління орендою - дозволяє адміністратору керувати процесом оренди автомобілів;
–	управління клієнтами - реєстрація облікових записів, редагування облікових записів, видалення клієнтів;
–	управління технічним обслуговуванням - дозволяє адміністратору керувати процесом технічного обслуговування автомобілів;
–	управління відгуками - дозволяє адміністратору переглядати та обробляти відгуки клієнтів.
Сценарії використання для клієнта:
–	реєстрація облікових записів - дозволяє клієнту зареєструвати свій обліковий запис у системі;
–	редагування облікових записів - дозволяє клієнту змінювати інформацію про свій обліковий запис;
–	управління відгуками - дозволяє клієнту залишати відгуки про орендовані автомобілі.
Зв'язки між сценаріями використання:
Сценарії, які мають позначку <<Include>>, вказують на те, що один сценарій є обов'язковою частиною іншого. Наприклад, редагування авто та видалення авто включені в управління автомобілями.
Ця діаграма Use Case надає візуальне уявлення про функціональність системи та ролі користувачів, що допомагає зрозуміти, як користувачі взаємодіють із системою та які основні функції їм доступні.


 
2 ПОСТАНОВКА ЗАДАЧІ
2.1 Основний функціонал системи


Оренда автомобілів є популярним способом мобільності як для приватних осіб, так і для бізнесу. З розвитком технологій та зростаючою потребою в гнучких рішеннях для подорожей, попит на послуги оренди автомобілів стабільно зростає. Проте, існуючі програмні рішення часто не відповідають сучасним вимогам користувачів, залишаючи простір для покращення з точки зору зручності, швидкості та функціональності. Відсутність інтегрованих платформ, що поєднують в собі управління флотом, обробку замовлень та підтримку клієнтів, створює труднощі для компаній, що займаються орендою автомобілів.
Водночас, клієнти очікують від сервісів оренди автомобілів зручного та інтуїтивного користувацького досвіду, який дозволить швидко знаходити і бронювати автомобілі, керувати своїми замовленнями та отримувати підтримку в режимі реального часу. Розробка нової програмної системи для управління орендою автомобілів спрямована на вирішення цих проблем шляхом впровадження сучасних технологій, що забезпечують високу продуктивність та зручність використання для кінцевих користувачів та операторів системи.





2.2 Допущення та залежності


Зал №1: Користувачі будуть мати доступ до інтернету для використання нашої системи.
Зал №2: Бізнеси-орендодавці готові до впровадження нових технологій та інтеграції їх в свої операційні процеси.
Зал №3: Ринок оренди автомобілів продовжить зростати, забезпечуючи попит на наші послуги.
При №1: Інтеграція з платіжними системами повинна бути надійною та безпечною.
При №2: Партнерство з автопарками та агентствами з оренди автомобілів є ключовим для успішного впровадження системи.
При №3: Регулярне оновлення та підтримка системи для забезпечення безперебійної роботи та відповідності сучасним вимогам.
При №4: Забезпечення високого рівня кібербезпеки для захисту даних користувачів та бізнесів.


2.3 Релізи


Серверна (back-end) частина повинна включати:
–	додавання документів до облікових записів користувачів;
–	редагування даних облікових записів;
–	видалення даних;
–	адміністративна панель, що надає зручну можливість редагувати дані в системі;
–	адміністративна панель бази даних, що надає можливість редагування всіх даних, а також імпортування та експортування даних до БД.
IoT частина повинна включати:
–	налаштування при першому запуску;
–	якщо пристрій був відключений від Інтернету та його не виключили, то через деякий час він може почати вібрувати і шуміти, щоб його знайшли.
Front-end частина повинна включати:
–	панель керування організацією;
–	адміністративна панель, що дозволяє управління користувачами системи та даними системи;
–	локалізований та інтернаціоналізований інтерфейс: програма підтримує українську та англійську мови, коректно відображає дату та час, підтримує міжнародні символи;
–	панель керування документами;
–	перегляд статистики.
Мобільна частина повинна включати:
–	реєстрацію та вхід користувачів: сторінки авторизації та реєстрації;
–	локалізований та інтернаціоналізований інтерфейс: програма підтримує українську та англійську мови, коректно відображає дату та час, підтримує міжнародні символи;
–	додавання документів;
–	запис даних до пристроїв.



2.4 Користувацькі обмеження


Не включено підтримку автоматичного пілотування або систем автономного управління автомобілями.
Поки що не планується розробка інтеграції з технічними системами автомобілів, такими як системи навігації або діагностики.
Обмеження доступу до системи для осіб молодше 18 років.
 
3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ
3.1 Back-end частина системи


У цьому розділі буде описано побудову серверної частини системи управління орендою автомобілів, включаючи діаграми пакетів та розгортання. Система складається з фронтенд частини, мобільного додатку, IoT-системи та бекенд-сервера.
Діаграма пакетів (див. рис. 3.1) показує організацію системи на рівні модулів або пакетів, які взаємодіють між собою.

 
Рисунок 3.1 – Діаграма пакетів

Діаграма розгортання (див. рис. 3.2) показує фізичне розташування компонентів системи на сервері та клієнтських пристроях.

 
Рисунок 3.2 – Діаграма розгортання

Ця архітектура забезпечує масштабованість та гнучкість системи, дозволяючи легко додавати нові функціональні можливості та інтегрувати різні компоненти між собою.

 
3.2 Frontend-частина системи


Інтерфейс програми розроблений таким чином, щоб забезпечити максимальну зручність для користувача при роботі з системою управління орендою автомобілів. Інтерфейс включає кілька основних сторінок і компонентів, кожен з яких виконує свою функцію.
Головна сторінка (MainPage): Це основна сторінка додатку, яка вітає користувача і забезпечує навігацію по всьому додатку. На цій сторінці може бути розміщена основна інформація про компанію, новини та інші важливі повідомлення.
Сторінка автомобілів (Cars): Відображає список всіх автомобілів, доступних в системі. Користувач може переглядати деталі кожного автомобіля, додавати нові автомобілі, редагувати інформацію про існуючі та видаляти автомобілі, які більше не використовуються.
Сторінка клієнтів (Customers): Відображає список всіх клієнтів системи. Користувач може переглядати інформацію про клієнтів, додавати нових клієнтів, редагувати існуючі записи та видаляти клієнтів.
Сторінка оренди (Rentals): Відображає список всіх оренд, включаючи інформацію про автомобіль, що орендується, та клієнта, що орендує. Користувач може створювати нові оренди, редагувати існуючі записи та видаляти оренди.
Сторінка технічного обслуговування (Maintenances): Відображає список всіх записів технічного обслуговування автомобілів. Користувач може додавати нові записи, редагувати існуючі та видаляти записи.
Сторінка відгуків (Feedbacks): Відображає список всіх відгуків клієнтів. Користувач може переглядати відгуки, додавати нові, редагувати існуючі та видаляти відгуки.


3.3 IoT частина системи


Для реалізації системи управління орендою автомобілів була розроблена IoT система на основі платформи ASP.NET WPF. Вибір цієї платформи обумовлений її гнучкістю, можливістю швидкої розробки та ефективною інтеграцією з іншими технологіями.
Система складається з кількох ключових компонентів, які забезпечують її функціональність:
–	датчики IoT - основна функція датчиків полягає у визначенні координат автомобіля у реальному часі. Датчики фіксують X та Y координати автомобіля та відправляють ці дані до сервера;
–	клієнтська частина (WPF додаток) - цей компонент розроблений за допомогою WPF (Windows Presentation Foundation) і слугує для емуляції та взаємодії з користувачем. Клієнтський додаток отримує дані від датчиків і передає їх на сервер. Відображення інформації у додатку дозволяє користувачам слідкувати за місцезнаходженням автомобілів у режимі реального часу;
–	серверна частина (ASP.NET) - серверна частина системи реалізована на платформі ASP.NET, що забезпечує обробку отриманих даних від клієнтського додатку та їх збереження у базі даних. Сервер обробляє запити на отримання координат та іншу необхідну інформацію, забезпечуючи її зберігання та подальше використання;
–	база даних - всі отримані координати автомобілів зберігаються у базі даних. Це дозволяє вести історію переміщень кожного автомобіля, що може бути корисним для аналізу ефективності використання автопарку та інших потреб.
 
4 СТРУКТУРА БАЗИ ДАНИХ
4.1 ER-моделювання


Даний розділ описую структуру бази даних та описує всі сутності. ER-діаграма (див. рис. 4.1) показує взаємозв'язки між різними сутностями в системі, такими як автомобілі, клієнти, оренди, технічне обслуговування та відгуки. Це важливий інструмент для проектування бази даних, оскільки дозволяє візуалізувати структуру даних і їх взаємозв'язки.

 
Рисунок 4.1 – ER-діаграма


На ER-діаграмі представлені такі сутності:
–	автомобіль: Містить інформацію про автомобілі, включаючи марку, модель, рік випуску та інші характеристики;
–	клієнт: Містить інформацію про клієнтів, такі як ім'я, контактні дані, документи і т.д;
–	оренда: Містить інформацію про оренди автомобілів, включаючи дати початку та завершення, автомобіль, що орендується, та клієнта, що орендує;
–	технічне обслуговування: Містить інформацію про технічне обслуговування автомобілів, включаючи тип обслуговування, дату та деталі;
–	відгук: Містить інформацію про відгуки клієнтів щодо автомобілів та послуг.


4.2 Реалізація БД


Таблиці та їх атрибути: 
Автомобіль:
–	іd: Унікальний ідентифікатор автомобіля;
–	марка: Марка автомобіля;
–	модель: Модель автомобіля;
–	дата_випуску: Дата випуску автомобіля;
–	VIN: Ідентифікаційний номер автомобіля (Vehicle Identification Number);
–	номерний_знак: Номерний знак автомобіля;
–	колір: Колір автомобіля;
–	коробка_передач: Тип коробки передач;
–	локація_X: Координати X місцезнаходження автомобіля;
–	локація_Y: Координати Y місцезнаходження автомобіля.
Страхування:
–	іd: Унікальний ідентифікатор страхування;
–	номер_полісу: Номер страхового полісу;
–	постачальник: Постачальник страхування;
–	дата_початку: Дата початку дії страхового полісу;
–	дата_кінця: Дата закінчення дії страхового полісу;
–	сума_покриття: Сума страхового покриття;
–	нагорода: Нагорода за страхування.
Технічне_обслуговування:
–	id: Унікальний ідентифікатор технічного обслуговування;
–	дата: Дата проведення технічного обслуговування;
–	опис: Опис виконаних робіт;
–	ціна: Вартість технічного обслуговування;
–	сервісний_центр: Назва або ідентифікатор сервісного центру;
–	дані_одометра: Показники одометра на момент обслуговування;
–	чи_виконано: Статус виконання технічного обслуговування (виконано/не виконано).
Клієнт:
–	id: Унікальний ідентифікатор клієнта;
–	ім'я: Ім'я клієнта;
–	прізвище: Прізвище клієнта;
–	дата_народження: Дата народження клієнта;
–	пошта: Електронна пошта клієнта;
–	телефон: Номер телефону клієнта;
–	адреса: Адреса проживання клієнта;
–	номер_водійського_посвідчення: Номер водійського посвідчення клієнта.
Відгук:
–	id: Унікальний ідентифікатор відгуку;
–	дата: Дата залишення відгуку;
–	рейтинг: Оцінка клієнта;
–	коментар: Коментар клієнта.
Оренда:
–	id: Унікальний ідентифікатор оренди;
–	дата_початку: Дата початку оренди;
–	дата_кінця: Дата закінчення оренди;
–	чи_активне: Статус оренди (активна/не активна);
–	ціна: Вартість оренди;
–	жані_одометра_на_початку: Показники одометра на початок оренди;
–	дані_одометра_в_кінці: Показники одометра на кінець оренди.
Зв'язки між таблицями:
–	автомобіль і страхування - зв'язок один до багатьох. Один автомобіль може мати декілька страхових полісів;
–	автомобіль і технічне_обслуговування -зв'язок один до багатьох. Один автомобіль може проходити декілька технічних обслуговувань;
–	клієнт і відгук - зв'язок один до багатьох. Один клієнт може залишити декілька відгуків;
–	автомобіль і оренда - зв'язок один до багатьох. Один автомобіль може бути орендований декілька разів;
–	клієнт і оренда - зв'язок один до багатьох. Один клієнт може орендувати декілька автомобілів;
–	клієнт і відгук через Оренда. зв'язок опосередкований (через таблицю "Оренда") - відгуки клієнтів пов'язані з конкретними орендами автомобілів.
Ці таблиці та зв'язки забезпечують цілісність даних та зручність роботи з ними, забезпечуючи ефективне управління інформацією про клієнтів, автомобілі, страхування, технічне обслуговування, оренду та відгуки.


 
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ
5.1 Серверна частина


Для створення серверної частини системи управління орендою автомобілів використовуються передові технології, які забезпечують високу продуктивність, безпеку та гнучкість. Основною технологією для серверної частини є ASP.NET. Нижче ми розглянемо детальніше компоненти та відповідні технології, що входять до складу цієї системи.
ASP.NET Core — це кросплатформенний, високопродуктивний фреймворк для створення сучасних, хмарних, підключених до Інтернету додатків.
Основні переваги ASP.NET Core:
–	кросплатформеність: Можливість запуску на різних операційних системах;
–	висока продуктивність: Оптимізований для створення високопродуктивних додатків;
–	модульність: Можливість додавання лише тих компонентів, які необхідні для конкретного проекту;
–	хмарна інтеграція: Підтримка розробки додатків для хмарних середовищ, таких як Microsoft Azure;
–	підтримка сучасних стандартів: Сумісність з останніми веб-стандартами та технологіями.
Entity Framework Core — сучасний об’єктно-реляційний маппер (ORM) для .NET, який дозволяє розробникам працювати з базою даних, використовуючи .NET об'єкти.
Основні можливості Entity Framework Core:
–	зручність використання: Спрощення роботи з базами даних шляхом використання .NET об'єктів;
–	підтримка різних баз даних: Можливість роботи з різними СУБД, такими як Microsoft SQL Server;
–	міграції баз даних: Інструменти для управління змінами структури бази даних у процесі розробки;
–	висока продуктивність: Оптимізація запитів і операцій з даними.
Microsoft SQL Server — реляційна система управління базами даних (СУБД), розроблена компанією Microsoft.
Основні особливості Microsoft SQL Server:
–	висока продуктивність: Оптимізована для швидкої обробки великих обсягів даних;
–	безпека: Підтримка передових технологій шифрування та захисту даних;
–	масштабованість: Можливість розширення для підтримки зростаючих потреб бізнесу;
–	інтеграція з іншими продуктами Microsoft: Легка інтеграція з продуктами та сервісами Microsoft, такими як Azure;
–	інструменти для адміністрування та розробки: Набір інструментів для зручного адміністрування бази даних та розробки додатків.


5.2 Frontend


Для розробки клієнтської частини системи управління орендою автомобілів були використані наступні технології:
–	react: Бібліотека для створення інтерфейсів користувача. React [1] дозволяє створювати динамічні та інтерактивні веб-додатки з високою продуктивністю;
–	typeScript: Надбудова над JavaScript, яка додає статичну типізацію. Використання TypeScript дозволяє зменшити кількість помилок під час розробки та покращити якість коду;
–	axios: Бібліотека для виконання HTTP запитів. Вона використовується для взаємодії клієнтської частини з серверною;
–	CSS: Мова стилів для опису зовнішнього вигляду документів. Використовується для створення стилів компонентів інтерфейсу;
–	HTML: Мова розмітки для створення веб-сторінок. Використовується для структурування контенту додатку.


5.3 IoT 


Процес обміну даними:
–	збір координат - датчики встановлені на автомобілях постійно фіксують їхні координати. Як тільки координати оновлюються, вони автоматично відправляються на сервер;
–	передача даних на сервер - клієнтська частина (WPF додаток) виступає як посередник, який приймає координати від датчиків та передає їх на сервер через HTTP запити;
–	обробка та збереження даних - серверна частина (ASP.NET) отримує дані координат, обробляє їх та зберігає у базі даних. Це дозволяє зберігати актуальну інформацію про місцезнаходження автомобілів та використовувати її для подальших аналітичних задач.
Переваги та можливості:
–	реальний час - система дозволяє відстежувати місцезнаходження автомобілів у реальному часі, що підвищує безпеку та контроль над автопарком;
–	зручність - використання WPF додатку спрощує взаємодію з системою для кінцевих користувачів, забезпечуючи інтуїтивно зрозумілий інтерфейс;
–	ефективність - збереження даних у базі дозволяє аналізувати історію переміщень автомобілів, що сприяє підвищенню ефективності їх використання.
Таким чином, розроблена система на базі ASP.NET WPF забезпечує надійне та ефективне управління орендою автомобілів, використовуючи сучасні IoT технології для збору та обробки даних про місцезнаходження транспортних засобів.

 
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ
6.1 IoT система


Застосування системи управління орендою автомобілів в реальних умовах має ряд ключових особливостей, які роблять її корисною та ефективною для різних аспектів бізнесу. Основні особливості застосування включають:
–	автоматизація процесів бронювання та управління орендою: Система забезпечує повну автоматизацію процесів бронювання автомобілів;
–	ефективне управління автопарком: Завдяки централізованому управлінню даними про автомобілі, система дозволяє компаніям ефективно керувати своїм автопарком. Вона надає можливість відслідковувати технічний стан автомобілів, планувати їх обслуговування та своєчасно проводити необхідні ремонтні роботи;
–	реальне відстеження місцезнаходження автомобілів: Інтеграція технологій Інтернету речей (IoT) дозволяє в режимі реального часу відстежувати координати орендованих автомобілів. Це підвищує рівень безпеки, дозволяючи оперативно реагувати на нестандартні ситуації, такі як крадіжка автомобіля або відхилення від запланованого маршруту;
–	зручний інтерфейс для користувачів: Інтуїтивно зрозумілий веб-інтерфейс дозволяє клієнтам швидко та легко здійснювати операції з орендою автомобілів. Користувачі можуть зручно бронювати автомобілі, переглядати історію своїх оренд, залишати відгуки та отримувати оперативну підтримку;
–	аналітика та звітність: Система надає потужні інструменти для аналізу даних та створення звітів. Це дозволяє компаніям аналізувати тренди використання автомобілів, ефективність орендного бізнесу та приймати обґрунтовані рішення щодо подальшого розвитку;
–	підвищена безпека даних: Використання сучасних технологій шифрування та механізмів безпеки забезпечує надійний захист персональних даних клієнтів та інформації про автомобілі. Це важливо для дотримання вимог законодавства та підвищення довіри клієнтів;
–	масштабованість та гнучкість: Система спроектована таким чином, щоб легко масштабуватись та адаптуватись до зростаючих потреб бізнесу. Вона дозволяє додавати нові функціональні можливості, інтегруватись з іншими системами та розширюватися відповідно до вимог ринку;
–	покращення якості обслуговування клієнтів: Завдяки автоматизації процесів та зручному інтерфейсу, клієнти отримують високий рівень обслуговування, що підвищує їх задоволеність та лояльність. Система дозволяє швидко реагувати на запити клієнтів, пропонувати їм спеціальні пропозиції та знижки, що сприяє залученню нових клієнтів та утриманню існуючих.
Таким чином, система управління орендою автомобілів має численні особливості, які роблять її незамінним інструментом для оптимізації бізнес-процесів, підвищення ефективності управління автопарком та покращення якості обслуговування клієнтів.

 
ВИСНОВКИ


В результаті виконання курсової роботи була розроблена комплексна система управління орендою автомобілів, яка забезпечує ефективне управління процесами бронювання, обліку та аналізу даних про автомобілі та клієнтів. Система включає серверну частину, розроблену за допомогою ASP.NET Core, що забезпечує високу продуктивність, безпеку та гнучкість. Для зберігання даних була спроектована база даних, оптимізована для масштабованості та ефективної обробки запитів, з використанням Microsoft SQL Server.
Клієнтська частина системи була розроблена з акцентом на зручність та інтуїтивно зрозумілий інтерфейс користувача, що дозволяє легко виконувати необхідні операції з управління орендою, такими як створення, редагування та видалення записів про автомобілі, клієнтів, оренди, технічне обслуговування та відгуки. Інтеграція IoT технологій дозволила забезпечити відстеження місцезнаходження автомобілів у режимі реального часу, що підвищило рівень безпеки та ефективність управління автопарком.
Таким чином, поставлені завдання були виконані, а мета курсової роботи досягнута. Розроблена система управління орендою автомобілів готова до впровадження та може стати надійним інструментом для компаній, що надають послуги з оренди автомобілів, сприяючи підвищенню якості обслуговування клієнтів та оптимізації внутрішніх процесів.

 
ПЕРЕЛІК ДЖЕРЕЛ


1.	Офіційна документація Microsoft ASP.NET Web API. URL: https://learn.microsoft.com/en-us/aspnet/web-api/ .
2.	Офіційна документація Microsoft Entity Framework. URL: https://learn.microsoft.com/en-us/ef/.
3.	Microsoft Learn. URL: https://learn.microsoft.com/en-us/dotnet/csharp/ .
4.	Технічна документація WPF. URL: https://learn.microsoft.com/en-us/dotnet/desktop/wpf/?view=netdesktop-8.0.
5.	Інтернет речей (IoT) для розробників. URL: https://blog.apnic.net/tag/internet-of-things/?gad_source=1&gclid=CjwKCAjwgpCzBhBhEiwAOSQWQfLynYbOhErjSgRPVcFJl3vPNpKwLpl6GEVCsb_jIizpUOgxa8JNbhoCAIsQAvD_BwE.
6.	MS SQL. URL: https://www.microsoft.com/ru-ru/sql-server/sql-server-downloads%20.
7.	React. URL: https://react.dev/.
8.	TypeScript. URL: https://www.typescriptlang.org/.
9.	JavaScript. URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript.
10.	React Router. URL: https://reactrouter.com/.
11.	Axios. URL: https://axios-http.com/.
12.	CSS. URL: https://developer.mozilla.org/en-US/docs/Web/CSS.
13.	HTML. URL: https://developer.mozilla.org/en-US/docs/Web/HTML.
14.	JSON. URL: https://www.json.org/json-en.html.
